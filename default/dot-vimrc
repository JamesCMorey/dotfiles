call plug#begin()

Plug 'bfrg/vim-cpp-modern'
Plug 'preservim/nerdtree'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'mbbill/undotree'

call plug#end()

set backspace=indent,eol,start
"let g:NERDTreeDirArrowExpandable="+"
"let g:NERDTreeDirArrowCollapsible="~"
set encoding=UTF-8

if !exists('g:syntax_on')
		syntax enable
endif

set cursorline
set nu rnu
set ruler
set incsearch
set nowrap

set tags+=./tags;/
set nocompatible

set enc=utf-8
set fenc=utf-8
set termencoding=utf-8

"autocmd Filetype tex setl updatetime=1
autocmd FileType * set nocindent
hi! link TODO Boolean
set softtabstop=4
set smartindent
set smarttab
set sw=4 ts=4 expandtab

set textwidth=80
set colorcolumn=81
" set spell
set tabpagemax=20

" make vim . go to netrw
autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) | execute 'Explore' | endif

let mapleader = ' '
" Window Navigation
" requires 'w' to be pressed twice to switch pane
nnoremap <leader>wg <C-W><C-W>l

" NERDTree
nnoremap <leader>g <C-W>w
nnoremap <leader>t :NERDTree<CR>

" Buffer Navigation
nnoremap <leader>b :w<CR>:Buf<CR>
nnoremap <leader>n :bn!<CR>
nnoremap <leader>p :bp!<CR>
nnoremap <leader>d :bd<CR>

" close all buffers except the current one
nnoremap <leader>cb :%bd\|e#\|bd#<CR>

" Misc Remaps
nnoremap <leader>h :Header <C-r>=input("Title: ")<CR><CR>
nnoremap <leader>f :w<CR>:Files<CR>
nnoremap <leader>g :w<CR>:RG<CR>
nnoremap <leader>s :source ~/.vimrc<CR>
"nnoremap <leader>dn :VimwikiDiaryNextDay<CR>
"nnoremap <leader>dp :VimwikiDiaryPrevDay<CR>
inoremap {<CR> {<CR>}<esc>O
inoremap kj <ESC>
nnoremap <ESC><ESC> :nohl<CR>
xnoremap rn :s/[0-9]*\./0./<CR>gvg<C-a>
nmap <leader>l :LLPStartPreview<cr>
nnoremap <leader>e :Explore<CR>

" fuzzy finder
nnoremap <leader>sb :w<CR>:Buffers<CR>
nnoremap <leader>sf :w<CR>:Files<CR>
nnoremap <leader>sg :w<CR>:RG<CR>

set backup
set backupdir=~/.vim/backup//

set undofile
set undodir=~/.vim/undodir//

set directory=~/.vim/swp//

" delete trailing white space upon write
autocmd BufWritePre * :%s/\s\+$//e

function! InsertDynamicHeader(title)
    " Define total width (optional, can be fixed or calculated based on title length)
    let l:total_width = max([76, len(a:title) + 20]) " Ensure at least 20 padding
    let l:divider = repeat("*", l:total_width)

    " Calculate padding
    let l:title_length = len(a:title)
    let l:total_padding = l:total_width - l:title_length " Account for borders
    let l:left_padding = repeat(" ", l:total_padding / 2)
    let l:right_padding = repeat(" ", l:total_padding - len(l:left_padding))

    " Construct header
    let l:header = "/*" . l:left_padding . a:title . l:right_padding . "*/"
    call append('.', "/*" . l:divider . "*/")
    call append('.', l:header)
    call append('.', "/*" . l:divider . "*/")
endfunction

command! -nargs=1 Header call InsertDynamicHeader(<q-args>)
